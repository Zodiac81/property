php artisan make:middleware FirstMiddelware

.../app/Http/Middleware/FirstMiddelware.php


1)
	<?php
		namespace App\Http\Middleware;
		use Closure;
		class FirstMiddelware
		{
		    /**
		     * Handle an incoming request.
		     *
		     * @param  \Illuminate\Http\Request  $request
		     * @param  \Closure  $next
		     * @return mixed
		     */
		    public function handle($request, Closure $next)
		    {
		    	if($request->route('data') == 'check'){
			    return redirect('/');
			}
		        return $next($request);
		    }
		}

2)
	.../app/Http/Kernel.php

	<?php
		...

		protected $routeMiddleware = [
			...
	        'mymiddle' => \App\Http\Middleware\FirstMiddelware::class,
	    ];
	}

3)
	.../routes/web.php

	Route::any('/any/{data?}', [
		'as' => 'any',
		'uses' => function($data = null){ return view('test.test', ['data' => $data]); },
		'middleware' => 'mymiddle',																// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		'middleware' => ['mymiddle', auth, ... ]
    ]);
    Route::any('/any/{data?}', function($data = null){ return 123; })->middleware('mymiddle);

```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
.../app/Http/Kernel.php
	
	protected $middlewareGroups = [										// можем создать группу посредников и передать в route
        'web' => [...

```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
.../app/Http/Controllers/TestController.php

	publick function __construct(){
		$this->middleware('mymiddle');
	}
