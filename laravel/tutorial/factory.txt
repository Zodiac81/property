database/factories

php artisan make:factory PostFactory

php artisan make:factory PostFactory --model=Post


### Resetting The Database After Each Test

	namespace Tests\Feature;

	use Tests\TestCase;
	use Illuminate\Foundation\Testing\RefreshDatabase;
	use Illuminate\Foundation\Testing\WithoutMiddleware;

	class ExampleTest extends TestCase
	{
	    use RefreshDatabase;

	    public function testBasicExample()
	    {
	        $response = $this->get('/');

	        // ...
	    }
	}


### Insert data

	use Faker\Generator as Faker;

	$factory->define(App\User::class, function (Faker $faker) {
	    return [
	        'name' => $faker->name,
	        'email' => $faker->unique()->safeEmail,
	        'password' => '$2y$10$TKh8H1.PfQx37YgCzwiKb.KjNyWgaHb9cbcoQgdIVFlYg7B77UdFm', // secret
	        'remember_token' => str_random(10),
	    ];
	});


### Run

	factory(App\Signature::class, 100)->create();  			// create and save 100 Signatures
	$user = factory(App\User::class)->create();
	$users = factory(App\User::class, 3)->create();
	$user = factory(App\User::class)->create([
	    'name' => 'Abigail',
	]);


	$user = factory(App\User::class)->make(); 				// make 100 Signatures
	$users = factory(App\User::class, 3)->make();
	$users = factory(App\User::class, 5)->states('delinquent')->make();
	$users = factory(App\User::class, 5)->states('premium', 'delinquent')->make();
	$user = factory(App\User::class)->make([
	    'name' => 'Abigail',
	]);

	$factory->state(App\User::class, 'delinquent', [
	    'account_status' => 'delinquent',
	]);
	$factory->state(App\User::class, 'address', function ($faker) {
	    return [
	        'address' => $faker->address,
	    ];
	});

### Relationships
	
	$users = factory(App\User::class, 3)
       ->create()
       ->each(function ($u) {
            $u->posts()->save(factory(App\Post::class)->make());
        });

    $factory->define(App\Post::class, function ($faker) {
	    return [
	        'title' => $faker->title,
	        'content' => $faker->paragraph,
	        'user_id' => function () {
	            return factory(App\User::class)->create()->id;
	        }
	    ];
	});

	$factory->define(App\Post::class, function ($faker) {
	    return [
	        'title' => $faker->title,
	        'content' => $faker->paragraph,
	        'user_id' => function () {
	            return factory(App\User::class)->create()->id;
	        },
	        'user_type' => function (array $post) {
	            return App\User::find($post['user_id'])->type;
	        }
	    ];
	});