ИСПОЛЬЗОВАНИЕ СЕССИЙ


Session::put('key', 'value'); 							// 	Сохранение переменной в сессии


Session::push('user.teams', 'developers'); 				// 	Добавление элемента к переменной-массиву


$value = Session::get('key'); 							// 	Чтение переменной сессии


$value = Session::get('key', 'default'); 				// 	Чтение переменной со значением по умолчанию
$value = Session::get('key', function() { return 'дефолтное значение'; });


$value = Session::pull('key', 'дефолтное значение'); 	// 	Чтение переменной и удаление её


$data = Session::all();									// 	Получение всех переменных сессии


if (Session::has('users')) 								// Проверка существования переменой
{
    //
}


Session::forget('key');									// 	Удаление переменной из сессии


Session::flush(); 										// 	Удаление всех переменных


Session::regenerate();									// 	Присвоение сессии нового идентификатора


ОДНОРАЗОВЫЕ FLASH-ДАННЫЕ
Иногда вам нужно сохранить переменную только для следующего запроса, после выполнения которого она должна быть автоматически удалена. Это нужно, например, для передачи ошибок валидации в форму. Вы можете сделать это методом Session::flash (flash англ. - вспышка - прим. пер.):

Session::flash('key', 'value');
Продление всех одноразовых переменных ещё на один запрос

Session::reflash();
Продление только отдельных переменных

Session::keep(array('username', 'email'));

СЕССИИ В БАЗАХ ДАННЫХ

При использовании драйвера database вам нужно создать таблицу, которая будет содержать данные сессий. Ниже пример такого объявления с помощью конструктора таблиц (Schema):

Schema::create('sessions', function($table)
{
    $table->string('id')->unique();
    $table->text('payload');
    $table->integer('last_activity');
});
Либо вы можете использовать Artisan-команду session:table для создания этой миграции:

php artisan session:table

composer dump-autoload

php artisan migrate