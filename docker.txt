1)	Install
	
	sudo apt-get update
	sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
	sudo apt-add-repository 'deb https://apt.dockerproject.org/repo ubuntu-xenial main'
	sudo apt-get update
	apt-cache policy docker-engine		//
										// 	docker-engine:
											  Installed: (none)
											  Candidate: 1.11.1-0~xenial
											  Version table:
											     1.11.1-0~xenial 500
											        500 https://apt.dockerproject.org/repo ubuntu-xenial/main amd64 Packages
											     1.11.0-0~xenial 500
											        500 https://apt.dockerproject.org/repo ubuntu-xenial/main amd64 Packages
	sudo apt-get install -y docker-engine
	sudo systemctl status docker

	sudo usermod -aG docker $(whoami)

	1.1)
		Docker-composer
			sudo curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
			sudo chmod +x /usr/local/bin/docker-compose
			docker-compose --version 		//	docker-compose version 1.19.0, build 1719ceb

docker version

2) Use

	docker [опция] [команда] [аргументы]

	docker version

	docker search ubuntu 			// 	search
	docker pull ubuntu:latest		// 	pull
	docker images 					// 	see
	docker image 					// 	see
	docker run nginx 				// 	run

	docker attach 					// 	подключиться к работающему контейнеру
	docker exec -it nginx  bash
	
	docker cp nginx:/etc/nginx/conf.d/default.conf ./default.conf 			// 	копирывание из контейнера
	docker cp nginx:/etc/apache2/apache2.conf ./apache2.conf 			// 	копирывание из контейнера

	docker create 					// 	создать контейнер, но не запускать его
	docker up 						// 	создать и запустить контейнер по инструкции dockerfile
	docker run 						// 	создать и запустить контейнер из образа
		--name shot_name   			// 	name for conteiner
		-P 							// 	open conteiner`s ports and set random-ports in out
		-p | --publish=[]			// 	open conteiner`s ports
		-p 8080:80					// 	8080 - in, 80 - out
		-v ~/content/default.conf:/etc/nginx/conf.d/default.conf
									// 	связать
		--volumes-from <cont name or ID> 	// take v in other cont
		--privileged  				// 	дает все привелегии контейнеру
		-d 							// 	запустить в фоновом режиме (открепит (detach) терминал)
		--rm 						// 	remove conteiner in the end
		-it nginx bash 				// 	Запустить контейнер в интерактивном режиме
		--link name:alias
		--env <key>=<value>			// 	выполнить команду env
		-e | --env=[] 				// 	пробрасывает переменные окружения внутрь контейнера
		-w  						// 	Указать рабочую директорию (--workdir)
		-u  						// 	Пользователь:группа под которым должен быть запущен контейнер
	docker volume ls -qf danging=true 	// show vol of die container`s
	docker volume rm $(docker volume ls -qf danging=true) 		// kill them
	
	docker stop 					// 	остановить контейнер
	docker start 					// 	запустить существующий остановленный контейнер
	docker restart 					// 	перезапустить контейнер
	docker rm 						// 	удалить контейнер
		-f  						// 	удалять запущенные контейнеры без их остановки
	docker rmi -f docker-nginx  	// 	remove image
		-f принудительно
	docker kill 					// 	отправить сигнал SIGKILL контейнеру
	docker wait 					// 	блокировать команду и ждать, пока контейнер не остановится
	docker ps 						// 	показать работающие контейнеры (или вообще контейнеры)
		-a 							// 	all conteiners (and hlam)
	docker inspect  container_name	// 	показать всю информацию о контейнере, включая IP-адреса
	docker logs 					// 	показать лог-вывод контейнера
	docker events 					// 	показать события контейнера
	docker port 					// 	показать открытые наружу порты контейнера
	docker top 						// 	показать процессы, работающие внутри контейнера
	docker stats 					// 	показать статистику использования ресурсов контейнером
	docker diff 					// 	показать изменённые файлы в файловой системе контейнера
	docker container ls --all 		// show containers
	docker container ls
	docker container stop <Container NAME or ID>
	docker network 
					connect     
					create      
					disconnect  
					inspect     
					ls          
					prune       
					rm

efb3e7e954de    python    "bash"      6 minutes ago     Exited (0) 2 minutes ago    gifted_wozniak
	docker commit efb3e7e954de new_image_name
	docker history new_image_name

	docker build .
	docker build -t my_test/1 .
		trukhinyuri – название репозитория, где будет храниться образ
		nginx – имя образа
		static_web - путь к папке с Dockerfile

docker run --rm -v $(pwd):/app composer/composer update
docker run --rm -v $(pwd):/app composer/composer install

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  remove ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

docker rm $(docker ps -a | grep -v "_data" | awk 'NR>1 {print $1}')

Kill all running containers
	docker kill $(docker ps -q)
	docker rm $(docker ps -a -q)
	docker rmi $(docker images -q -f dangling=true)
	docker rmi $(docker images -q)

	docker volume ls -qf dangling=true
	docker volume rm $(docker volume ls -qf dangling=true)


Kill docker

	sudo apt-get purge -y docker-engine
	sudo apt-get autoremove -y --purge docker-engine
	sudo rm -rf /var/lib/docker
	sudo apt-get purge -y docker-engine docker docker.io docker-ce
	sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce
	sudo apt-get autoclean

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  dockerfile ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	FROM – задать базовый образ
	RUN – выполнить команду в контейнере
	ENV – задать переменную среды
	WORKDIR – установить рабочий каталог
	VOLUME – создать точку монтирования для тома
	CMD – установить исполняемый файл для контейнера

touch Dockerfile 									//	Каждая инструкция пишется заглавными буквами 
													//	Каждая инструкция добавляет новый слой в образ и коммитит изменения
													// 	# - комментарий
		https://docs.docker.com/engine/reference/builder/#usage

	# Version: 0.0.1
	FROM ubuntu:14.04								// из какого образа строить образ
	MAINTAINER Yuri Trukhin <trukhinyuri@infoboxcloud.com> 		// Docker автора образа и его email
	ENV myName John Doe 							//  устанавливает переменные окружения в образе
	ENV <key> <value>
	ENV <key>=<value>
	RUN apt-get update \								// RUN исполняет команду
		&& apt-get install -y nginx
		&& echo 'Hi, I am in your container' \
	        >/usr/share/nginx/html/index.html
	EXPOSE 80										// приложение в контейнере должно использовать порт 80
	WORKDIR /opt/webapp/db 							// установить директорию, откуда будут запускаться команды
	ENTRYPOINT ["/usr/sbin/nginx"]					
									// При запуске контейнера параметры передаются команде, указанной в ENTRYPOINT
	USER user 						// Специфицирует пользователя, под которым должен быть запущен образ
	RUN ["apt-get", "install", "-y", "nginx"] 		// указать формат исполнения
	CMD ["/bin/bash", "-l"]							// указывает команду, когда контейнер запущен
	VOLUME ["/opt/project"] 						// добавляет тома в образ
	ADD software.lic /opt/application/software.lic 	// добавляет файлы или папки из нашего билд-окружения в образ
	ADD http://wordpress.org/latest.zip /root/wordpress.zip
	COPY conf.d/ /etc/apache2/ 						// COPY отличается от ADD тем, что предназначена для копирования локальных файлов из билд-контекста и не поддерживает распаковки файлов
	ONBUILD ADD . /app/src 							// добавляет триггеры в образы
	ONBUILD RUN cd /app/src && make

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Docker manipulate ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	docker tag image username/repository:tag
	docker tag friendlyhello lexus132/get-started:part1

	docker push username/repository:tag
	docker push lexus132/get-started:part1

	docker run -p 4000:80 username/repository:tag

	docker container ls
	docker container ls --all
	docker container stop cfab6c89823b
	docker stack deploy -c docker-compose.yml getstartedlab
	docker service ls
	docker service ps getstartedlab_web
	docker container ls -q
	docker service ls
	docker service ps getstartedlab_web
	docker stack deploy -c docker-compose.yml getstartedlab
	docker stack rm getstartedlab 		// 
	docker swarm leave --force 			// 


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Сеть в Docker ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. bridge
2. host
3. none

docker run --name nginx -d nginx:latest
#6e47c39f797a71429971e5c2df59305dd5bd2e47bd901e2f404de18a53aefa53
docker inspect --format '{{ .NetworkSettings.IPAddress }}' 6e4
#172.17.0.2
docker run -ti busybox
#/ # 
wget -qO- 172.17.0.2

--link
	docker run -ti --link=nginx busybox
		env | grep tcp://
		#NAUSEOUS_ARYABHATA_PORT=tcp://172.17.0.2:80
		#NAUSEOUS_ARYABHATA_PORT_80_TCP=tcp://172.17.0.2:80
		#NAUSEOUS_ARYABHATA_PORT_443_TCP=tcp://172.17.0.2:443
		cat /etc/hosts | grep nginx
		#172.17.0.2	nginx 78633fc191d2

		wget -qO- http://nginx
		#<!DOCTYPE html>
		#<html>
		#<head>
		#<title>Welcome to ...

имя контейнера и создать свою сеть
	1. Шаг первый. Создаём свою сеть:
		docker network create mynetwork
	2. Запускаем в этой сети nginx. В этот раз с явно указанным именем web
		docker run -d --net=mynetwork --name=web nginx:latest
	3. Запустим в этой же сети еще один контейнер, и проверим, видит ли он web
		docker run -ti --net=mynetwork busybox
			wget -qO- web
			#<!DOCTYPE html>
			#...
			
Использовать сетевой псевдоним
	docker run -d \ 
	       --net=mynetwork \ 
	       --network-alias=webserver nginx

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  TEST ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

nginx
	sudo docker pull nginx
	sudo docker run --name docker-nginx -p 80:80 nginx 					// 	запуска этого контейнера
				run это команда создания нового контейнера
				--name Флаг как мы указываем имя контейнера (если оставлено пустым один назначается для нас, как nostalgic_hopper из шага 2)
				-p указывает порт, который мы размещаем в формате -p local-machine-port:internal-container-port. В этом случае мы сопоставляем порт 80 в контейнере с портом 80 на сервере
				nginx это имя изображения на dockerhub (мы загрузили это раньше командой pull, но Docker сделает это автоматически, если изображение отсутствует)

	docker rm docker-nginx -f			//	удалить существующий docker-nginx

	docker run --name docker-nginx -p 13280:80 -d nginx
				-d флаг для запуска этого контейнера в фоновом режиме

	docker stop docker-nginx				// 	остановить контейнер

	docker run --name docker-nginx -p 13280:80 -d -v ~/docker-nginx/html:/usr/share/nginx/html nginx
				Мы видим, что новым дополнением к команде -v ~/docker-nginx/html:/usr/share/nginx/html является наша ссылка на объем.
				-v указывает, что мы связываем том
				часть слева от : местоположения нашего каталога / каталога на нашей виртуальной машине ( ~/docker-nginx/html)
				часть справа от : местоположения, с которым мы связываемся в нашем контейнере ( /usr/share/nginx/html)

	docker cp docker-nginx:/etc/nginx/conf.d/default.conf ./default.conf 			// 	взять файл конфигурации nginx из контейнера docker-nginx в текущую дирректорию

	docker run --name docker-nginx -p 13280:80 -v ~/docker-nginx/html:/usr/share/nginx/html -v ~/docker-nginx/default.conf:/etc/nginx/conf.d/default.conf -d nginx



		http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/
docker + nginx + php (docker-compose.yml)
	touch ./docker-compose.yml
		web:
			image: nginx:latest
			ports:
			- "8080:80"

	docker-compose up
	mkdir ./code
	nano ./docker-compose.yml
		web:
		  web:
			  image: nginx:latest
			  ports:
			    - "8080:80"
			  volumes:
			    - ./code:/usr/share/nginx/html
			    - ./default.conf:/etc/nginx/conf.d/default.conf
	touch ./default.conf
