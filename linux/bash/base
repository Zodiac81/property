#!/bin/bash

chmod +x ./myscript

./myscript

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
# This is a comment
pwd
whoami

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

pwd ; whoami

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ inline ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

for i in {1..5}; do COMMAND-HERE; done
for((i=1;i<=10;i+=2)); do echo "Welcome $i times"; done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pause stop sleep ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

sleep 1

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Вывод сообщений ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
# our comment is here
echo "The current directory is:"
pwd
echo "The user logged in is:"
whoami

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Переменные среды ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
# display user home
echo "Home for the current user is: $HOME"
echo "Home for the current user is: $USER"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Пользовательские переменные ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
# testing variables
grade=5
person="Adam"
echo "$person is a good boy, he is in grade $grade"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Подстановка команд ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
mydir=`pwd`
mydir=$(pwd)
echo $mydir

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Математические операции ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
var1=$(( 5 + 5 ))
echo $var1
var2=$(( $var1 * 2 ))
echo $var2

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Управляющая конструкция if-then ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
if pwd
then
	echo "It YES"
fi
if ! 0
then
	echo "It NOT"
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
user=likegeeks
if grep $asus /etc/passwd
then
	echo "The user $user Exists"
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Управляющая конструкция if-then-else ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
user=asus
if grep $user /etc/passwd
then
	echo "The user $user Exists"
else
	echo "The user $user doesn’t exist"
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Управляющая конструкция if-then-elif-then ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
user=anotherUser
if grep $user /etc/passwd
then
	echo "The user $user Exists"
elif ls /home
then
	echo "The user doesn’t exist but anyway there is a directory under /home"
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Сравнение чисел ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

n1 -eq n2 Возвращает истинное значение, если n1 равно n2.   			'=='
n1 -ge n2 Возвращает истинное значение, если n1больше или равно n2.		'>='
n1 -gt n2 Возвращает истинное значение, если n1 больше n2.				'>'
n1 -le n2 Возвращает истинное значение, если n1 меньше или равно n2.	'<='
n1 -lt n2 Возвращает истинное значение, если n1 меньше n2.				'<'
n1 -ne n2 Возвращает истинное значение, если n1 не равно n2.			'!='	

#!/bin/bash
val1=6
if [ $val1 -gt 5 ]
then
	echo "The test value $val1 is greater than 5"
else
	echo "The test value $val1 is not greater than 5"
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Сравнение строк ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

str1 = str2  Проверяет строки на равенство, возвращает истину, если строки идентичны.
str1 != str2 Возвращает истину, если строки не идентичны.
str1 < str2  Возвращает истину, если str1 меньше, чем str2.
str1 > str2  Возвращает истину, если str1больше, чем str2.
-n str1 	 Возвращает истину, если длина str1 больше нуля.
-z str1 	 Возвращает истину, если длина str1 равна нулю.

#!/bin/bash
user="asus"
if [ $user = $USER ]
then
	echo "The user $user  is the current logged in user"
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
val1=text
val2="another text"
if [ $val1 \> $val2 ]
then
	echo "$val1 is greater than $val2"
else
	echo "$val1 is less than $val2"
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
val1=text
val2="another text"
if [ $val1 \> "$val2" ]
then
	echo "$val1 is greater than $val2"
else
	echo "$val1 is less than $val2"
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Проверки файлов ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

-d file1 		Проверяет, существует ли файл, и является ли он директорией.
-e file 		Проверяет, существует ли файл.
-f file 		Проверяет, существует ли файл, и является ли он файлом.
-r file 		Проверяет, существует ли файл, и доступен ли он для чтения.
-s file 		Проверяет, существует ли файл, и не является ли он пустым.
-w file 		Проверяет, существует ли файл, и доступен ли он для записи.
-x file 		Проверяет, существует ли файл, и является ли он исполняемым.
file1 -nt file2 Проверяет, новее ли file1, чем file2.
file1 -ot file2 Проверяет, старше ли file1, чем file2.
-O file 		Проверяет, существует ли файл, и является ли его владельцем текущий пользователь.
-G file 		Проверяет, существует ли файл, и соответствует ли его идентификатор группы идентификатору группы текущего пользователя.

#!/bin/bash
mydir=/home/$USER
if [ -d $mydir ]
then
	echo "The $mydir directory exists"
cd $mydir
ls
else
	echo "The $mydir directory does not exist"
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Перебор простых значений ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
for var in first second third fourth fifth
do
	echo The  $var item
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Перебор сложных значений ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
for var in first "the second" "the third" "I’ll do it"
do
	echo "This is: $var"
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Инициализация цикла списком, полученным из результатов работы команды ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
file="myfile"
for var in $(cat $file)
do
	echo " $var"
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Разделители полей ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
file="/etc/passwd"
IFS=$'\n'
for var in $(cat $file)
do
	echo " $var"
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Обход файлов, содержащихся в директории ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
for file in /home/$USER/*
do
	if [ -d "$file" ]
	then
		echo "$file is a directory"
	elif [ -f "$file" ]
	then
		echo "$file is a file"
	fi
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Циклы for в стиле C ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
for (( i=1; i <= 10; i++ ))
do
echo "number is $i"
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Цикл while ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
var1=5
while [ $var1 -gt 0 ]
do
echo $var1
var1=$[ $var1 - 1 ]
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Вложенные циклы ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
for (( a = 1; a <= 3; a++ ))
do
	echo "Start $a:"
	for (( b = 1; b <= 3; b++ ))
	do
		echo " Inner loop: $b"
	done
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Обработка содержимого файла ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
IFS=$'\n'
for entry in $(cat /etc/passwd)
do
	echo "Values in $entry –"
	IFS=:
	for value in $entry
	do
		echo " $value"
	done
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Управление циклами ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

- break
- continue

#!/bin/bash
for var1 in 1 2 3 4 5 6 7 8 9 10
do
	if [ $var1 -eq 5 ]
	then
		break
	fi
	echo "Number: $var1"
done

#!/bin/bash
for (( var1 = 1; var1 < 15; var1++ ))
do
	if [ $var1 -gt 5 ] && [ $var1 -lt 10 ]
	then
		continue
	fi
	echo "Iteration number: $var1"
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Пример: поиск исполняемых файлов ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
IFS=:
for folder in $PATH
do
	echo "$folder:"
	for file in $folder/*
	do
		if [ -x $file ]
		then
			echo " $file"
		fi
	done
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Чтение параметров командной строки ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

$ ./temp  1 2 3 4 5 7

$0 — имя скрипта.
$1 — первый параметр.
$2 — второй параметр — и так далее, вплоть до переменной $9, в которую попадает девятый параметр.

#!/bin/bash
echo $0
echo $1
echo $2
echo $3

./myscript 5 10 15

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Проверка параметров ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
if [ -n "$1" ]
then
	echo Hello $1.
else
	echo "No parameters found. "
fi

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Подсчёт параметров ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
echo There were $# parameters passed.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ получения последнего из переданных скрипту параметров ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
echo The last parameter was ${!#}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Захват всех параметров командной строки ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

$* содержит все параметры
$# содержит количество переданных аргументов
$@ параметры разбиты на отдельные «слова»

#!/bin/bash
echo "Using the \$* method: $*"
echo "-----------"
echo "Using the \$@ method: $@"

#!/bin/bash
count=1
for param in "$*"
do
	echo "\$* Parameter #$count = $param"
	count=$(( $count + 1 ))
done
count=1
for param in "$@"
do
	echo "\$@ Parameter #$count = $param"
	count=$(( $count + 1 ))
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Команда shift ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
count=1
while [ -n "$1" ]
do
	echo "Parameter #$count = $1"
	count=$(( $count + 1 ))
	shift
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Ключи командной строки ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
echo
while [ -n "$1" ]
do
case "$1" in
-a) echo "Found the -a option" ;;
-b) echo "Found the -b option" ;;
-c) echo "Found the -c option" ;;
*) echo "$1 is not an option" ;;
esac
shift
done

$ ./myscript –a –b –c –d

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Как различать ключи и параметры ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
while [ -n "$1" ]
do
case "$1" in
-a) echo "Found the -a option" ;;
-b) echo "Found the -b option";;
-c) echo "Found the -c option" ;;
--) shift
break ;;
*) echo "$1 is not an option";;
esac
shift
done
count=1
for param in $@
do
echo "Parameter #$count: $param"
count=$(( $count + 1 ))
done

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Использование стандартных ключей ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

-a Вывести все объекты.
-c Произвести подсчёт.
-d Указать директорию.
-e Развернуть объект.
-f Указать файл, из которого нужно прочитать данные.
-h Вывести справку по команде.
-i Игнорировать регистр символов.
-l Выполнить полноформатный вывод данных.
-n Использовать неинтерактивный (пакетный) режим.
-o Позволяет указать файл, в который нужно перенаправить вывод.
-q Выполнить скрипт в quiet-режиме.
-r Обрабатывать папки и файлы рекурсивно.
-s Выполнить скрипт в silent-режиме.
-v Выполнить многословный вывод.
-x Исключить объект.
-y Ответить «yes» на все вопросы.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Получение данных от пользователя ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
temp=''
while [ -n $temp ]
do
	echo -n "Enter your name: "
	read name
	if [ -n "$name" ]
	then
		break
	fi
	clear
done
echo "Hello $name, welcome to my program."

#!/bin/bash
read -p "Enter your name: "
echo Hello $REPLY, welcome to my program.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Ввод паролей ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
read -s -p "Enter your password: " pass
echo
echo "Is your password really $pass? "

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Чтение данных из файла ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
count=1
cat myfile | while read line
do
	echo "Line $count: $line"
	count=$(( $count + 1 ))
done
echo "Finished"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Стандартные дескрипторы файлов ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

0, STDIN — стандартный поток ввода.
1, STDOUT — стандартный поток вывода.
2, STDERR — стандартный поток ошибок.

STDIN — это стандартный поток ввода оболочки.
STDOUT — стандартный поток вывода оболочки.


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Перенаправление потока ошибок ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

ls -l xfile 2>myfile
cat ./myfile

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Постоянное перенаправление вывода ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash
exec 1>outfile
echo "This is a test of redirecting all output"
echo "from a shell script to another file."
echo "without having to redirect every line"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Сигналы Linux ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

Код сигнала 	Название 	Описание
1				SIGHUP		Закрытие терминала
2				SIGINT		Сигнал остановки процесса пользователем с терминала (CTRL + C)
3				SIGQUIT		Сигнал остановки процесса пользователем с терминала (CTRL + \) с дампом памяти
9				SIGKILL		Безусловное завершение процесса
15				SIGTERM		Сигнал запроса завершения процесса
17				SIGSTOP		Принудительная приостановка выполнения процесса, но не завершение его работы
18				SIGTSTP		Приостановка процесса с терминала (CTRL + Z), но не завершение работы
19				SIGCONT		Продолжение выполнения ранее остановленного процесса



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

#!/bin/bash

echo -n "Продолжить? (y/n) "

read item
case "$item" in
    y|Y) echo "Ввели «y», продолжаем..."
        ;;
    n|N) echo "Ввели «n», завершаем..."
        exit 0
        ;;
    *) echo "Ничего не ввели. Выполняем действие по умолчанию..."
        ;;
esac